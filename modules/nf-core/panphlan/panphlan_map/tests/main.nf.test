nextflow_process {

    name "Test Process PANPHLAN_MAP"
    script "modules/nf-core/panphlan/panphlan_map/main.nf"
    process "PANPHLAN_MAP"

    setup {
        run("PANPHLAN_DOWNLOADPANGENOME") {
            script "modules/nf-core/panphlan/downloadpangenome/main.nf"
                process {
                    """
                    input[0] = "Staphylococcus_aureus"
                    """
                }
            }

            run("SRATOOLS_PREFETCH") {
                script "modules/nf-core/sratools/prefetch/main.nf"
                process {
                """
                input[0] = Channel.of([ [ id:'test', single_end:false ], 'SRR29288987' ])
                input[1] = file(params.modules_testdata_base_path + 'generic/config/ncbi_user_settings.mkfg', checkIfExists: true)
                input[2] = []
                """
                }
            }

            run("SRATOOLS_FASTERQDUMP") {
                script "modules/nf-core/sratools/fasterqdump/main.nf"
                process {
                """
                input[0] = UNTAR.out.untar.map{ meta, files -> [ [ id:'test_single_end', single_end:true ], files]}
                input[1] = file(params.modules_testdata_base_path + 'generic/config/ncbi_user_settings.mkfg', checkIfExists: true)
                input[2] = []
                """
                }
            }
        }


    test("Bacteroides fragilis sample fastq - single_end") {

        when {
            process {
                """
                input[0] = PANPHLAN_DOWNLOADPANGENOME.out.pangenome
                input[1] = PANPHLAN_DOWNLOADPANGENOME.out.indexes

                input[2] = SRATOOLS_PREFETCH
                input[3] = "Bacteroides_fragilis"
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
        }
    }
}