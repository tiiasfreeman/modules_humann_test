nextflow_process {

    name "Test Process HUMANN_RENORMTABLE"
    script "../main.nf"
    process "HUMANN_RENORMTABLE"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "humann"
    tag "humann/renorm_table"

    // Dependencies
    tag "humann/downloadchocophlandb"
    tag "humann/downloadunirefdb"

    setup {
        run("HUMANN_DOWNLOADCHOCOPHLANDB") {
            script "../../downloadchocophlandb/main.nf"
            process {
                """
                input[0] = "DEMO"
                """
            }
        }

        run("HUMANN_DOWNLOADUNIREFDB") {
            script "../../downloadunirefdb/main.nf"
            process {
                """
                input[0] = "DEMO_diamond"
                """
            }
        }

        run("HUMANN_HUMANN") {
            script "/workspace/modules_humann_test/modules/local/humann/humann/main.nf"
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_1.fastq.gz', checkIfExists: true)
                    ]
                input[1] = [
                    [ id:'test', single_end:true ], // meta map
                    file("/workspace/modules_humann_test/METAPHLAN_PROFILE_FOR_TEST.txt", checkIfExists: true)
                    ]
                input[2] = HUMANN_DOWNLOADCHOCOPHLANDB.out.chocophlan_db
                input[3] = HUMANN_DOWNLOADUNIREFDB.out.uniref_db
                """
            }
        }
    }

    test("HUMANN_RENORMTABLE test with HUMANN_HUMANN ") {
        when {
            process {
                """
                input[0] = "genefamilies"
                input[1] = HUMANN_HUMANN.out.genefamilies
                input[2] = "cpm"
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
             //   { assert snapshot(process.out).match() }
            )
        }
    }

    test("HUMANN_RENORMTABLE test with demo_genefamilies.tsv ") {

        options "-stub"

        when {
            process {
                """
                input[0] = "genefamilies"
                input[1] = [
                    [ id:'test', single_end:true ], // meta map
                    // file("/workspace/modules_humann_test/humann/build/lib/humann/tests/data/demo_genefamilies.tsv", checkIfExists: true)
                    file("/workspace/modules_humann_test/humann/humann/tests/data/demo_pathabundance_with_names.tsv", checkIfExists: true)
                    ]
                input[2] = "relab"
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
             //   { assert snapshot(process.out).match() }
            )
        }
    }
}