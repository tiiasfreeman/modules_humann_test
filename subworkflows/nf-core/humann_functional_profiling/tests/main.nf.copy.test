// TODO nf-core: Once you have added the required tests, please run the following command to build this file:
// nf-core subworkflows test humann_functional_profiling
nextflow_workflow {

    name "Test Subworkflow HUMANN_FUNCTIONAL_PROFILING"
    script "/workspace/modules_humann_test/subworkflows/nf-core/humann_functional_profiling/main.new.copy.nf"
    config "./nextflow.config"
    workflow "HUMANN_FUNCTIONAL_PROFILING"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/humannfunctionalprofiling"
    tag "humann/downloadchocophlandb"
    tag "humann/downloadunirefdb"
    tag "humann/humann"
    tag "humann/downloadutilitymappingdb"
    tag "humann/join_tables"
    tag "humann/renorm_tables"
    tag "humann/regroup_tables"
    tag "humann/rename_tables"
    tag "humann/merge_reads"



    // TODO nf-core: Change the test name preferably indicating the test-data and file-format used
    test("sarscov2 - bam - single_end") {

        when {
            workflow {
                """
                // TODO nf-core: define inputs of the workflow here. Example:
                input[0] = "DEMO"
                input[1] = "DEMO_diamond"
                input[2] = "full"
                input[3] = Channel.of([
                        [ id:'test1', single_end:false ], // meta map
                        [file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_2.fastq.gz', checkIfExists: true)]
                        ])
                input[4] = [
                    [ id:'test', single_end:true ], // meta map
                    file("/workspace/modules_humann_test/METAPHLAN_PROFILE_FOR_TEST.txt", checkIfExists: true)]
                input[5] = "cpm"
                input[6] = "uniref90_rxn"
                input[7] = "kegg-orthology"
                input[8] = "N"
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()}
                //TODO nf-core: Add all required assertions to verify the test output.
            )
        }
    }
}
