nextflow_workflow {

    name "Subworkflow PANPHLAN_GENOMIC_PROFILING"
    script "subworkflows/nf-core/panphlan_genomic_profiling/main.nf"
    config "./nextflow.config"
    workflow "PANPHLAN_GENOMIC_PROFILING"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/panphlan_genomic_profiling"
    tag "panphlan/downloadpangenome"
    tag "panphlan/panphlan_map"
    tag "panphlan/panphlan_profiling"

    test("Bacteroides_fragilis - combined single end - fails") {
        when {
            workflow {
                """
                input[0] = "Bacteroides_fragilis"
                input[1] = Channel.of([ [ id:'test', single_end:false ], // meta map
                        [file("https://github.com/nf-core/test-datasets/raw/modules/data/genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_1.fastq.gz", checkIfExists:true),
                        file("https://github.com/nf-core/test-datasets/raw/modules/data/genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_2.fastq.gz", checkIfExists:true),
                        file("https://github.com/nf-core/test-datasets/raw/modules/data/genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test2_1.fastq.gz", checkIfExists:true),
                        file("https://github.com/nf-core/test-datasets/raw/modules/data/genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test2_2.fastq.gz", checkIfExists:true)]
                    ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()}
            )
        }
    }
}
